// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { Auth0MyOrgClient } from "../../../src/Client";
import * as Auth0MyOrg from "../../../src/api/index";

describe("Configuration", () => {
    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "cop_jk546torh901234567890a",
            name: "name",
            enabled_features: ["scim", "universal_logout"],
            organization: { show_as_button: "required", assign_membership_on_login: "optional" },
            strategy_overrides: {
                adfs: { enabled_features: ["scim"] },
                googleapps: { enabled_features: ["scim"] },
                oidc: { enabled_features: ["scim"] },
                okta: {
                    enabled_features: ["scim"],
                    provisioning: {
                        provisioning_on_login: "never_on_login",
                        scim: { tokens: { scopes: ["patch:users"] } },
                    },
                },
                pingfederate: { enabled_features: ["scim"] },
                samlp: { enabled_features: ["universal_logout"] },
                waad: { enabled_features: ["scim"] },
            },
            domain_aliases_config: { domain_verification: "none" },
            provisioning: {
                provisioning_on_login: "on_first_login",
                scim: {
                    tokens: {
                        scopes: ["get:users", "post:users", "patch:users"],
                        default_expiry: 1200,
                        max_allowed_expiry: 2400,
                    },
                },
            },
        };
        server
            .mockEndpoint()
            .get("/config/identity-providers")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.identityProviders.configuration.get();
        expect(response).toEqual({
            id: "cop_jk546torh901234567890a",
            name: "name",
            enabled_features: ["scim", "universal_logout"],
            organization: {
                show_as_button: "required",
                assign_membership_on_login: "optional",
            },
            strategy_overrides: {
                adfs: {
                    enabled_features: ["scim"],
                },
                googleapps: {
                    enabled_features: ["scim"],
                },
                oidc: {
                    enabled_features: ["scim"],
                },
                okta: {
                    enabled_features: ["scim"],
                    provisioning: {
                        provisioning_on_login: "never_on_login",
                        scim: {
                            tokens: {
                                scopes: ["patch:users"],
                            },
                        },
                    },
                },
                pingfederate: {
                    enabled_features: ["scim"],
                },
                samlp: {
                    enabled_features: ["universal_logout"],
                },
                waad: {
                    enabled_features: ["scim"],
                },
            },
            domain_aliases_config: {
                domain_verification: "none",
            },
            provisioning: {
                provisioning_on_login: "on_first_login",
                scim: {
                    tokens: {
                        scopes: ["get:users", "post:users", "patch:users"],
                        default_expiry: 1200,
                        max_allowed_expiry: 2400,
                    },
                },
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/config/identity-providers")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.identityProviders.configuration.get();
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/config/identity-providers")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.identityProviders.configuration.get();
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/config/identity-providers")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.identityProviders.configuration.get();
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/config/identity-providers")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.identityProviders.configuration.get();
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });
});
