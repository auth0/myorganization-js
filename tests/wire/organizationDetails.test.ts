// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../mock-server/MockServerPool";
import { Auth0MyOrgClient } from "../../src/Client";
import * as Auth0MyOrg from "../../src/api/index";

describe("OrganizationDetails", () => {
    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "org_zW1UHutvkVWSWdCC",
            name: "testorg",
            display_name: "Test Organization",
            branding: {
                logo_url: "https://example.com/logo.png",
                colors: { primary: "#000000", page_background: "#FFFFFF" },
            },
        };
        server.mockEndpoint().get("/details").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.organizationDetails.get();
        expect(response).toEqual({
            id: "org_zW1UHutvkVWSWdCC",
            name: "testorg",
            display_name: "Test Organization",
            branding: {
                logo_url: "https://example.com/logo.png",
                colors: {
                    primary: "#000000",
                    page_background: "#FFFFFF",
                },
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/details").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organizationDetails.get();
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/details").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organizationDetails.get();
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/details").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organizationDetails.get();
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/details").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organizationDetails.get();
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "testorg",
            display_name: "Test Organization",
            branding: {
                logo_url: "http://example.com/logo.png",
                colors: { primary: "#000000", page_background: "#FFFFFF" },
            },
        };
        const rawResponseBody = {
            id: "org_zW1UHutvkVWSWdCC",
            name: "testorg",
            display_name: "Test Organization",
            branding: {
                logo_url: "https://example.com/logo.png",
                colors: { primary: "#000000", page_background: "#FFFFFF" },
            },
        };
        server
            .mockEndpoint()
            .patch("/details")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organizationDetails.update({
            name: "testorg",
            display_name: "Test Organization",
            branding: {
                logo_url: "http://example.com/logo.png",
                colors: {
                    primary: "#000000",
                    page_background: "#FFFFFF",
                },
            },
        });
        expect(response).toEqual({
            id: "org_zW1UHutvkVWSWdCC",
            name: "testorg",
            display_name: "Test Organization",
            branding: {
                logo_url: "https://example.com/logo.png",
                colors: {
                    primary: "#000000",
                    page_background: "#FFFFFF",
                },
            },
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .patch("/details")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizationDetails.update({});
        }).rejects.toThrow(Auth0MyOrg.BadRequestError);
    });

    test("update (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .patch("/details")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizationDetails.update({});
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("update (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .patch("/details")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizationDetails.update({});
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("update (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .patch("/details")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizationDetails.update({});
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("update (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .patch("/details")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizationDetails.update({});
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });
});
