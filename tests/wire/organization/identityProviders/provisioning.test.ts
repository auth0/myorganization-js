// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { Auth0MyOrgClient } from "../../../../src/Client";
import * as Auth0MyOrg from "../../../../src/api/index";

describe("Provisioning", () => {
    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            identity_provider_id: "con_2CZPv6IY0gWzDaQJ",
            identity_provider_name: "EC-org-gaZPTTOS42pReSzs-id-ready2",
            strategy: "okta",
            method: "scim",
            fields: [
                {
                    provisioning_field: "userName",
                    user_attribute: "preferred_username",
                    description: "A longer way to describe this field",
                    label: "Preferred username",
                },
                {
                    provisioning_field: "emails[primary eq true].value",
                    user_attribute: "email",
                    description: "A longer way to describe this field",
                    label: "Email",
                },
                {
                    provisioning_field: "externalId",
                    user_attribute: "external_id",
                    description: "A longer way to describe this field",
                    label: "External ID",
                },
                {
                    provisioning_field: "active",
                    user_attribute: "blocked",
                    description: "A longer way to describe this field",
                    label: "Blocked",
                },
            ],
            user_id_attribute: "externalId",
            created_at: "2025-05-15T23:32:52Z",
            updated_on: "2025-05-15T23:32:52Z",
        };
        server
            .mockEndpoint()
            .get("/identity-providers/idp_id/provisioning")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organization.identityProviders.provisioning.get("idp_id");
        expect(response).toEqual({
            identity_provider_id: "con_2CZPv6IY0gWzDaQJ",
            identity_provider_name: "EC-org-gaZPTTOS42pReSzs-id-ready2",
            strategy: "okta",
            method: "scim",
            fields: [
                {
                    provisioning_field: "userName",
                    user_attribute: "preferred_username",
                    description: "A longer way to describe this field",
                    label: "Preferred username",
                },
                {
                    provisioning_field: "emails[primary eq true].value",
                    user_attribute: "email",
                    description: "A longer way to describe this field",
                    label: "Email",
                },
                {
                    provisioning_field: "externalId",
                    user_attribute: "external_id",
                    description: "A longer way to describe this field",
                    label: "External ID",
                },
                {
                    provisioning_field: "active",
                    user_attribute: "blocked",
                    description: "A longer way to describe this field",
                    label: "Blocked",
                },
            ],
            user_id_attribute: "externalId",
            created_at: "2025-05-15T23:32:52Z",
            updated_on: "2025-05-15T23:32:52Z",
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/identity-providers/idp_id/provisioning")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.provisioning.get("idp_id");
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/identity-providers/idp_id/provisioning")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.provisioning.get("idp_id");
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/identity-providers/idp_id/provisioning")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.provisioning.get("idp_id");
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/identity-providers/idp_id/provisioning")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.provisioning.get("idp_id");
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            identity_provider_id: "con_2CZPv6IY0gWzDaQJ",
            identity_provider_name: "EC-org-gaZPTTOS42pReSzs-id-ready2",
            strategy: "okta",
            method: "scim",
            fields: [
                {
                    provisioning_field: "userName",
                    user_attribute: "preferred_username",
                    description: "A longer way to describe this field",
                    label: "Preferred username",
                },
                {
                    provisioning_field: "emails[primary eq true].value",
                    user_attribute: "email",
                    description: "A longer way to describe this field",
                    label: "Email",
                },
                {
                    provisioning_field: "externalId",
                    user_attribute: "external_id",
                    description: "A longer way to describe this field",
                    label: "External ID",
                },
                {
                    provisioning_field: "active",
                    user_attribute: "blocked",
                    description: "A longer way to describe this field",
                    label: "Blocked",
                },
            ],
            user_id_attribute: "externalId",
            created_at: "2025-05-15T23:32:52Z",
            updated_on: "2025-05-15T23:32:52Z",
        };
        server
            .mockEndpoint()
            .post("/identity-providers/idp_id/provisioning")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organization.identityProviders.provisioning.create("idp_id");
        expect(response).toEqual({
            identity_provider_id: "con_2CZPv6IY0gWzDaQJ",
            identity_provider_name: "EC-org-gaZPTTOS42pReSzs-id-ready2",
            strategy: "okta",
            method: "scim",
            fields: [
                {
                    provisioning_field: "userName",
                    user_attribute: "preferred_username",
                    description: "A longer way to describe this field",
                    label: "Preferred username",
                },
                {
                    provisioning_field: "emails[primary eq true].value",
                    user_attribute: "email",
                    description: "A longer way to describe this field",
                    label: "Email",
                },
                {
                    provisioning_field: "externalId",
                    user_attribute: "external_id",
                    description: "A longer way to describe this field",
                    label: "External ID",
                },
                {
                    provisioning_field: "active",
                    user_attribute: "blocked",
                    description: "A longer way to describe this field",
                    label: "Blocked",
                },
            ],
            user_id_attribute: "externalId",
            created_at: "2025-05-15T23:32:52Z",
            updated_on: "2025-05-15T23:32:52Z",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/identity-providers/idp_id/provisioning")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.provisioning.create("idp_id");
        }).rejects.toThrow(Auth0MyOrg.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/identity-providers/idp_id/provisioning")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.provisioning.create("idp_id");
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/identity-providers/idp_id/provisioning")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.provisioning.create("idp_id");
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/identity-providers/idp_id/provisioning")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.provisioning.create("idp_id");
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("create (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/identity-providers/idp_id/provisioning")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.provisioning.create("idp_id");
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/identity-providers/idp_id/provisioning").respondWith().statusCode(200).build();

        const response = await client.organization.identityProviders.provisioning.delete("idp_id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/identity-providers/idp_id/provisioning")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.provisioning.delete("idp_id");
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/identity-providers/idp_id/provisioning")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.provisioning.delete("idp_id");
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/identity-providers/idp_id/provisioning")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.provisioning.delete("idp_id");
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("delete (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/identity-providers/idp_id/provisioning")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.provisioning.delete("idp_id");
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });
});
