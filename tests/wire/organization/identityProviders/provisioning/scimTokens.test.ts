// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../../../mock-server/MockServerPool";
import { Auth0MyOrgClient } from "../../../../../src/Client";
import * as Auth0MyOrg from "../../../../../src/api/index";

describe("ScimTokens", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            scim_tokens: [
                {
                    token_id: "tok_abc8H9hWQ8LaCkdh",
                    scopes: ["scopes"],
                    created_at: "2025-05-11T20:11:45Z",
                    valid_until: "2025-05-11T20:26:45Z",
                },
                {
                    token_id: "tok_tuz8H9hWQ8LaCkdh",
                    scopes: ["scopes"],
                    created_at: "2025-04-11T20:11:45Z",
                    valid_until: "2025-04-12T20:11:45Z",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/identity-providers/idp_id/provisioning/scim-tokens")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organization.identityProviders.provisioning.scimTokens.list("idp_id");
        expect(response).toEqual({
            scim_tokens: [
                {
                    token_id: "tok_abc8H9hWQ8LaCkdh",
                    scopes: ["scopes"],
                    created_at: "2025-05-11T20:11:45Z",
                    valid_until: "2025-05-11T20:26:45Z",
                },
                {
                    token_id: "tok_tuz8H9hWQ8LaCkdh",
                    scopes: ["scopes"],
                    created_at: "2025-04-11T20:11:45Z",
                    valid_until: "2025-04-12T20:11:45Z",
                },
            ],
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/identity-providers/idp_id/provisioning/scim-tokens")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.provisioning.scimTokens.list("idp_id");
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/identity-providers/idp_id/provisioning/scim-tokens")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.provisioning.scimTokens.list("idp_id");
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/identity-providers/idp_id/provisioning/scim-tokens")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.provisioning.scimTokens.list("idp_id");
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/identity-providers/idp_id/provisioning/scim-tokens")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.provisioning.scimTokens.list("idp_id");
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { token_lifetime: 86400 };
        const rawResponseBody = {
            token_id: "tok_tuz8H9hWQ8LaCkdh",
            scopes: ["scopes"],
            created_at: "2025-04-11T20:11:45Z",
            valid_until: "2025-04-12T20:11:45Z",
            token: "tok_tuz8H9hWQ8LaCkdh....",
        };
        server
            .mockEndpoint()
            .post("/identity-providers/idp_id/provisioning/scim-tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organization.identityProviders.provisioning.scimTokens.create("idp_id", {
            token_lifetime: 86400,
        });
        expect(response).toEqual({
            token_id: "tok_tuz8H9hWQ8LaCkdh",
            scopes: ["scopes"],
            created_at: "2025-04-11T20:11:45Z",
            valid_until: "2025-04-12T20:11:45Z",
            token: "tok_tuz8H9hWQ8LaCkdh....",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/identity-providers/idp_id/provisioning/scim-tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.provisioning.scimTokens.create("idp_id");
        }).rejects.toThrow(Auth0MyOrg.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/identity-providers/idp_id/provisioning/scim-tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.provisioning.scimTokens.create("idp_id");
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/identity-providers/idp_id/provisioning/scim-tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.provisioning.scimTokens.create("idp_id");
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/identity-providers/idp_id/provisioning/scim-tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.provisioning.scimTokens.create("idp_id");
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("create (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/identity-providers/idp_id/provisioning/scim-tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.provisioning.scimTokens.create("idp_id");
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete("/identity-providers/idp_id/provisioning/scim-tokens/idp_scim_token_id")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.organization.identityProviders.provisioning.scimTokens.delete(
            "idp_id",
            "idp_scim_token_id",
        );
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/identity-providers/idp_id/provisioning/scim-tokens/idp_scim_token_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.provisioning.scimTokens.delete(
                "idp_id",
                "idp_scim_token_id",
            );
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/identity-providers/idp_id/provisioning/scim-tokens/idp_scim_token_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.provisioning.scimTokens.delete(
                "idp_id",
                "idp_scim_token_id",
            );
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/identity-providers/idp_id/provisioning/scim-tokens/idp_scim_token_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.provisioning.scimTokens.delete(
                "idp_id",
                "idp_scim_token_id",
            );
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("delete (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/identity-providers/idp_id/provisioning/scim-tokens/idp_scim_token_id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.provisioning.scimTokens.delete(
                "idp_id",
                "idp_scim_token_id",
            );
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });
});
