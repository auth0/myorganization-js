// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { Auth0MyOrgClient } from "../../../../src/Client";
import * as Auth0MyOrg from "../../../../src/api/index";

describe("Domains", () => {
    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "my-domain.com" };
        const rawResponseBody = { domains: ["acme.com", "my-domain.com"] };
        server
            .mockEndpoint()
            .post("/identity-providers/idp_id/domains")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organization.identityProviders.domains.create("idp_id", {
            domain: "my-domain.com",
        });
        expect(response).toEqual({
            domains: ["acme.com", "my-domain.com"],
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "domain" };
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/identity-providers/idp_id/domains")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.domains.create("idp_id", {
                domain: "domain",
            });
        }).rejects.toThrow(Auth0MyOrg.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "domain" };
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/identity-providers/idp_id/domains")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.domains.create("idp_id", {
                domain: "domain",
            });
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "domain" };
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/identity-providers/idp_id/domains")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.domains.create("idp_id", {
                domain: "domain",
            });
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "domain" };
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/identity-providers/idp_id/domains")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.domains.create("idp_id", {
                domain: "domain",
            });
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("create (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "domain" };
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/identity-providers/idp_id/domains")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.domains.create("idp_id", {
                domain: "domain",
            });
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/identity-providers/idp_id/domains/domain").respondWith().statusCode(200).build();

        const response = await client.organization.identityProviders.domains.delete("idp_id", "domain");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/identity-providers/idp_id/domains/domain")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.domains.delete("idp_id", "domain");
        }).rejects.toThrow(Auth0MyOrg.BadRequestError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/identity-providers/idp_id/domains/domain")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.domains.delete("idp_id", "domain");
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/identity-providers/idp_id/domains/domain")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.domains.delete("idp_id", "domain");
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("delete (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/identity-providers/idp_id/domains/domain")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.domains.delete("idp_id", "domain");
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("delete (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/identity-providers/idp_id/domains/domain")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.domains.delete("idp_id", "domain");
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });
});
