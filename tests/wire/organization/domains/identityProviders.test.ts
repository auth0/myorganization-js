// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { Auth0MyOrgClient } from "../../../../src/Client";
import * as Auth0MyOrg from "../../../../src/api/index";

describe("IdentityProviders", () => {
    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            identity_providers: [
                { id: "con_2CZPv6IY0gWzDaQJ", name: "acme-engineering", display_name: "Acme Engineering" },
                { id: "con_2CZPv6IY0gWzDaQG", name: "acme-engineering-2", display_name: "Acme Engineering 2" },
            ],
        };
        server
            .mockEndpoint()
            .get("/domains/domain_id/identity-providers")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organization.domains.identityProviders.get("domain_id");
        expect(response).toEqual({
            identity_providers: [
                {
                    id: "con_2CZPv6IY0gWzDaQJ",
                    name: "acme-engineering",
                    display_name: "Acme Engineering",
                },
                {
                    id: "con_2CZPv6IY0gWzDaQG",
                    name: "acme-engineering-2",
                    display_name: "Acme Engineering 2",
                },
            ],
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/domains/domain_id/identity-providers")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.domains.identityProviders.get("domain_id");
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/domains/domain_id/identity-providers")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.domains.identityProviders.get("domain_id");
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/domains/domain_id/identity-providers")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.domains.identityProviders.get("domain_id");
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/domains/domain_id/identity-providers")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.domains.identityProviders.get("domain_id");
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });
});
