// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { Auth0MyOrgClient } from "../../../../src/Client";
import * as Auth0MyOrg from "../../../../src/api/index";

describe("Verify", () => {
    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "ord_aW1UHetvkBWSWdCCe8DWq7",
            org_id: "org_zW1UHutvkVWSWdCC",
            domain: "acme.com",
            status: "pending",
            verification_txt: "dove_text=asdfpiujnlewp-23849jdkfjzxcfpiawer",
            verification_host: "_ss-verification.org_zW1UHutvkVWSWdCC.acme.com",
        };
        server
            .mockEndpoint()
            .post("/domains/domain_id/verify")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organization.domains.verify.create("domain_id");
        expect(response).toEqual({
            id: "ord_aW1UHetvkBWSWdCCe8DWq7",
            org_id: "org_zW1UHutvkVWSWdCC",
            domain: "acme.com",
            status: "pending",
            verification_txt: "dove_text=asdfpiujnlewp-23849jdkfjzxcfpiawer",
            verification_host: "_ss-verification.org_zW1UHutvkVWSWdCC.acme.com",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/domains/domain_id/verify")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.domains.verify.create("domain_id");
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/domains/domain_id/verify")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.domains.verify.create("domain_id");
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/domains/domain_id/verify")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.domains.verify.create("domain_id");
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/domains/domain_id/verify")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.domains.verify.create("domain_id");
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });
});
