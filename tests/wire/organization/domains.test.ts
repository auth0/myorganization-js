// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { Auth0MyOrgClient } from "../../../src/Client";
import * as Auth0MyOrg from "../../../src/api/index";

describe("Domains", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            next: "eyJpZCI6Im9yZF96VzFVSGV0dmtCV1NXZENEZThEV3E3IiwidGVuYW50IjoidGVzdC10ZW5hbnQifQ",
            organization_domains: [
                {
                    id: "ord_aW1UHetvkBWSWdCCe8DWq7",
                    org_id: "org_zW1UHutvkVWSWdCC",
                    domain: "acme.com",
                    status: "pending",
                    verification_txt: "dove_text=asdfpiujnlewp-23849jdkfjzxcfpiawer",
                    verification_host: "_ss-verification.org_zW1UHutvkVWSWdCC.acme.com",
                },
                {
                    id: "ord_zW1UHetvkBWSWdCDe8DWq7",
                    org_id: "org_nW1UHutvkVWSWdCG",
                    domain: "roadrunner.com",
                    status: "failed",
                    verification_txt: "dove_text=bcxzpiujnlewp-23849jdkfjzxcfpiawer",
                    verification_host: "_ss-verification.org_nW1UHutvkVWSWdCG.acme.com",
                },
            ],
        };
        server.mockEndpoint().get("/domains").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.organization.domains.list();
        expect(response).toEqual({
            next: "eyJpZCI6Im9yZF96VzFVSGV0dmtCV1NXZENEZThEV3E3IiwidGVuYW50IjoidGVzdC10ZW5hbnQifQ",
            organization_domains: [
                {
                    id: "ord_aW1UHetvkBWSWdCCe8DWq7",
                    org_id: "org_zW1UHutvkVWSWdCC",
                    domain: "acme.com",
                    status: "pending",
                    verification_txt: "dove_text=asdfpiujnlewp-23849jdkfjzxcfpiawer",
                    verification_host: "_ss-verification.org_zW1UHutvkVWSWdCC.acme.com",
                },
                {
                    id: "ord_zW1UHetvkBWSWdCDe8DWq7",
                    org_id: "org_nW1UHutvkVWSWdCG",
                    domain: "roadrunner.com",
                    status: "failed",
                    verification_txt: "dove_text=bcxzpiujnlewp-23849jdkfjzxcfpiawer",
                    verification_host: "_ss-verification.org_nW1UHutvkVWSWdCG.acme.com",
                },
            ],
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/domains").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organization.domains.list();
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/domains").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organization.domains.list();
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/domains").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organization.domains.list();
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/domains").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organization.domains.list();
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "acme.com" };
        const rawResponseBody = {
            id: "ord_aW1UHetvkBWSWdCCe8DWq7",
            org_id: "org_zW1UHutvkVWSWdCC",
            domain: "acme.com",
            status: "pending",
            verification_txt: "dove_text=asdfpiujnlewp-23849jdkfjzxcfpiawer",
            verification_host: "_ss-verification.org_zW1UHutvkVWSWdCC.acme.com",
        };
        server
            .mockEndpoint()
            .post("/domains")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organization.domains.create({
            domain: "acme.com",
        });
        expect(response).toEqual({
            id: "ord_aW1UHetvkBWSWdCCe8DWq7",
            org_id: "org_zW1UHutvkVWSWdCC",
            domain: "acme.com",
            status: "pending",
            verification_txt: "dove_text=asdfpiujnlewp-23849jdkfjzxcfpiawer",
            verification_host: "_ss-verification.org_zW1UHutvkVWSWdCC.acme.com",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "domain" };
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/domains")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.domains.create({
                domain: "domain",
            });
        }).rejects.toThrow(Auth0MyOrg.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "domain" };
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/domains")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.domains.create({
                domain: "domain",
            });
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "domain" };
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/domains")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.domains.create({
                domain: "domain",
            });
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "domain" };
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/domains")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.domains.create({
                domain: "domain",
            });
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("create (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "domain" };
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/domains")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.domains.create({
                domain: "domain",
            });
        }).rejects.toThrow(Auth0MyOrg.ConflictError);
    });

    test("create (7)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "domain" };
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/domains")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.domains.create({
                domain: "domain",
            });
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "ord_aW1UHetvkBWSWdCCe8DWq7",
            org_id: "org_zW1UHutvkVWSWdCC",
            domain: "acme.com",
            status: "pending",
            verification_txt: "dove_text=asdfpiujnlewp-23849jdkfjzxcfpiawer",
            verification_host: "_ss-verification.org_zW1UHutvkVWSWdCC.acme.com",
        };
        server.mockEndpoint().get("/domains/domain_id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.organization.domains.get("domain_id");
        expect(response).toEqual({
            id: "ord_aW1UHetvkBWSWdCCe8DWq7",
            org_id: "org_zW1UHutvkVWSWdCC",
            domain: "acme.com",
            status: "pending",
            verification_txt: "dove_text=asdfpiujnlewp-23849jdkfjzxcfpiawer",
            verification_host: "_ss-verification.org_zW1UHutvkVWSWdCC.acme.com",
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/domains/domain_id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organization.domains.get("domain_id");
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/domains/domain_id").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organization.domains.get("domain_id");
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/domains/domain_id").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organization.domains.get("domain_id");
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/domains/domain_id").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organization.domains.get("domain_id");
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/domains/domain_id").respondWith().statusCode(200).build();

        const response = await client.organization.domains.delete("domain_id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/domains/domain_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.domains.delete("domain_id");
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/domains/domain_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.domains.delete("domain_id");
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/domains/domain_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.domains.delete("domain_id");
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("delete (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/domains/domain_id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.domains.delete("domain_id");
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });
});
