// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { Auth0MyOrgClient } from "../../../../src/Client";
import * as Auth0MyOrg from "../../../../src/api/index";

describe("Roles", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            roles: [
                { id: "rol_SO2j0sFo9NFa3F9w", name: "role1", description: "role1 description" },
                { id: "rol_BO2j1sFo9NFa3F9w", name: "role2", description: "role2 description" },
            ],
        };
        server
            .mockEndpoint()
            .get("/members/user_id/roles")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organization.members.roles.list("user_id");
        expect(response).toEqual({
            roles: [
                {
                    id: "rol_SO2j0sFo9NFa3F9w",
                    name: "role1",
                    description: "role1 description",
                },
                {
                    id: "rol_BO2j1sFo9NFa3F9w",
                    name: "role2",
                    description: "role2 description",
                },
            ],
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/members/user_id/roles")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.members.roles.list("user_id");
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/members/user_id/roles")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.members.roles.list("user_id");
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/members/user_id/roles")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.members.roles.list("user_id");
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/members/user_id/roles")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.members.roles.list("user_id");
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { role_id: "rol_SO2j0sFo9NFa3F9w" };
        const rawResponseBody = {
            roles: [
                { id: "rol_SO2j0sFo9NFa3F9w", name: "role1", description: "role1 description" },
                { id: "rol_BO2j1sFo9NFa3F9w", name: "role2", description: "role2 description" },
            ],
        };
        server
            .mockEndpoint()
            .post("/members/user_id/roles")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organization.members.roles.create("user_id", {
            role_id: "rol_SO2j0sFo9NFa3F9w",
        });
        expect(response).toEqual({
            roles: [
                {
                    id: "rol_SO2j0sFo9NFa3F9w",
                    name: "role1",
                    description: "role1 description",
                },
                {
                    id: "rol_BO2j1sFo9NFa3F9w",
                    name: "role2",
                    description: "role2 description",
                },
            ],
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/members/user_id/roles")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.members.roles.create("user_id");
        }).rejects.toThrow(Auth0MyOrg.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/members/user_id/roles")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.members.roles.create("user_id");
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/members/user_id/roles")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.members.roles.create("user_id");
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/members/user_id/roles")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.members.roles.create("user_id");
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("create (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/members/user_id/roles")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.members.roles.create("user_id");
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/members/user_id/roles/role_id").respondWith().statusCode(200).build();

        const response = await client.organization.members.roles.delete("user_id", "role_id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/members/user_id/roles/role_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.members.roles.delete("user_id", "role_id");
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/members/user_id/roles/role_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.members.roles.delete("user_id", "role_id");
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/members/user_id/roles/role_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.members.roles.delete("user_id", "role_id");
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("delete (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/members/user_id/roles/role_id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.members.roles.delete("user_id", "role_id");
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });
});
