// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { Auth0MyOrgClient } from "../../../src/Client";
import * as Auth0MyOrg from "../../../src/api/index";

describe("Members", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            members: [
                {
                    email: "roadrunner@acme.com",
                    name: "name",
                    nickname: "nickname",
                    given_name: "given_name",
                    family_name: "family_name",
                    user_id: "auth0|123234235",
                    is_guest: true,
                    roles: [
                        { id: "rol_BKI0BKI0BKI0BKI0", name: "role1" },
                        { id: "rol_BKW1BKIfBKd0BaI0", name: "role2" },
                    ],
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    last_login: "2024-01-15T09:30:00Z",
                },
            ],
        };
        server.mockEndpoint().get("/members").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.organization.members.list({
            q: "q",
            fields: "fields",
            include_fields: true,
            from: "from",
            take: 1,
        });
        expect(response).toEqual({
            members: [
                {
                    email: "roadrunner@acme.com",
                    name: "name",
                    nickname: "nickname",
                    given_name: "given_name",
                    family_name: "family_name",
                    user_id: "auth0|123234235",
                    is_guest: true,
                    roles: [
                        {
                            id: "rol_BKI0BKI0BKI0BKI0",
                            name: "role1",
                        },
                        {
                            id: "rol_BKW1BKIfBKd0BaI0",
                            name: "role2",
                        },
                    ],
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    last_login: "2024-01-15T09:30:00Z",
                },
            ],
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/members").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organization.members.list();
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/members").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organization.members.list();
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/members").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organization.members.list();
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/members").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organization.members.list();
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            email: "roadrunner@acme.com",
            name: "roadrunner",
            nickname: "beepbeep",
            given_name: "Road",
            family_name: "Runner",
            user_id: "auth0|123234235",
            is_guest: false,
            roles: [
                { id: "rol_BKI0BKI0BKI0BKI0", name: "role1", description: "description" },
                { id: "rol_BKW1BKIfBKd0BaI0", name: "role2", description: "description" },
            ],
            created_at: "2025-05-01T12:00:00Z",
            updated_at: "2025-05-02T12:00:00Z",
            last_login: "2025-05-03T12:00:00Z",
        };
        server.mockEndpoint().get("/members/user_id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.organization.members.get("user_id");
        expect(response).toEqual({
            email: "roadrunner@acme.com",
            name: "roadrunner",
            nickname: "beepbeep",
            given_name: "Road",
            family_name: "Runner",
            user_id: "auth0|123234235",
            is_guest: false,
            roles: [
                {
                    id: "rol_BKI0BKI0BKI0BKI0",
                    name: "role1",
                    description: "description",
                },
                {
                    id: "rol_BKW1BKIfBKd0BaI0",
                    name: "role2",
                    description: "description",
                },
            ],
            created_at: "2025-05-01T12:00:00Z",
            updated_at: "2025-05-02T12:00:00Z",
            last_login: "2025-05-03T12:00:00Z",
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/members/user_id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organization.members.get("user_id");
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/members/user_id").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organization.members.get("user_id");
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/members/user_id").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organization.members.get("user_id");
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/members/user_id").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organization.members.get("user_id");
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/members/user_id").respondWith().statusCode(200).build();

        const response = await client.organization.members.delete("user_id", {
            delete_user: true,
        });
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/members/user_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.members.delete("user_id", {
                delete_user: true,
            });
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/members/user_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.members.delete("user_id", {
                delete_user: true,
            });
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/members/user_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.members.delete("user_id", {
                delete_user: true,
            });
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("delete (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/members/user_id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.members.delete("user_id", {
                delete_user: true,
            });
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });
});
