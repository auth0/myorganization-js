// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { Auth0MyOrgClient } from "../../../src/Client";
import * as Auth0MyOrg from "../../../src/api/index";

describe("Configuration", () => {
    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { allowed_strategies: ["adfs", "pingfederate"], connection_deletion_behavior: "allow" };
        server.mockEndpoint().get("/config").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.organization.configuration.get();
        expect(response).toEqual({
            allowed_strategies: ["adfs", "pingfederate"],
            connection_deletion_behavior: "allow",
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/config").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organization.configuration.get();
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/config").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organization.configuration.get();
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/config").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organization.configuration.get();
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/config").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organization.configuration.get();
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });
});
