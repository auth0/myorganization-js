// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { Auth0MyOrgClient } from "../../../src/Client";
import * as Auth0MyOrg from "../../../src/api/index";

describe("Invitations", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            invitations: [
                {
                    id: "oui_12345678abcdefgh",
                    organization_id: "org_12345678abcdefgh",
                    inviter: { name: "Allison the Admin" },
                    invitee: { email: "user@example.com" },
                    client_id: "string",
                    connection_id: "con_2CZPv6IY0gWzDaQJ",
                    created_at: "2025-04-11T20:11:45Z",
                    expires_at: "2025-04-11T20:11:45Z",
                    roles: ["string"],
                    invitation_url: "<<initiate_login_url>>?invitation=<invite ID>&organization=org_123234",
                    ticket_id: "1asdfasd23usjdef",
                },
            ],
        };
        server.mockEndpoint().get("/invitations").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.organization.invitations.list();
        expect(response).toEqual({
            invitations: [
                {
                    id: "oui_12345678abcdefgh",
                    organization_id: "org_12345678abcdefgh",
                    inviter: {
                        name: "Allison the Admin",
                    },
                    invitee: {
                        email: "user@example.com",
                    },
                    client_id: "string",
                    connection_id: "con_2CZPv6IY0gWzDaQJ",
                    created_at: "2025-04-11T20:11:45Z",
                    expires_at: "2025-04-11T20:11:45Z",
                    roles: ["string"],
                    invitation_url: "<<initiate_login_url>>?invitation=<invite ID>&organization=org_123234",
                    ticket_id: "1asdfasd23usjdef",
                },
            ],
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/invitations").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organization.invitations.list();
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/invitations").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organization.invitations.list();
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/invitations").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organization.invitations.list();
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server.mockEndpoint().get("/invitations").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.organization.invitations.list();
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            invitee: { email: "user@example.com" },
            client_id: "string",
            connection_id: "con_2CZPv6IY0gWzDaQJ",
            ttl_sec: 3600,
            roles: ["string"],
            send_invitation_email: true,
        };
        const rawResponseBody = {
            id: "oui_12345678abcdefgh",
            organization_id: "org_12345678abcdefgh",
            inviter: { name: "Allison the Admin" },
            invitee: { email: "user@example.com" },
            client_id: "string",
            connection_id: "con_2CZPv6IY0gWzDaQJ",
            created_at: "2025-04-11T20:11:45Z",
            expires_at: "2025-04-11T20:11:45Z",
            roles: ["string"],
            invitation_url: "<<initiate_login_url>>?invitation=<invite ID>&organization=org_123234",
            ticket_id: "1asdfasd23usjdef",
        };
        server
            .mockEndpoint()
            .post("/invitations")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organization.invitations.create({
            invitee: {
                email: "user@example.com",
            },
            client_id: "string",
            connection_id: "con_2CZPv6IY0gWzDaQJ",
            ttl_sec: 3600,
            roles: ["string"],
            send_invitation_email: true,
        });
        expect(response).toEqual({
            id: "oui_12345678abcdefgh",
            organization_id: "org_12345678abcdefgh",
            inviter: {
                name: "Allison the Admin",
            },
            invitee: {
                email: "user@example.com",
            },
            client_id: "string",
            connection_id: "con_2CZPv6IY0gWzDaQJ",
            created_at: "2025-04-11T20:11:45Z",
            expires_at: "2025-04-11T20:11:45Z",
            roles: ["string"],
            invitation_url: "<<initiate_login_url>>?invitation=<invite ID>&organization=org_123234",
            ticket_id: "1asdfasd23usjdef",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            invitee: {},
            client_id: "client_id",
            connection_id: "connection_id",
            ttl_sec: 1,
            roles: ["roles", "roles"],
            send_invitation_email: true,
        };
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/invitations")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.invitations.create({
                invitee: {},
                client_id: "client_id",
                connection_id: "connection_id",
                ttl_sec: 1,
                roles: ["roles", "roles"],
                send_invitation_email: true,
            });
        }).rejects.toThrow(Auth0MyOrg.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            invitee: {},
            client_id: "client_id",
            connection_id: "connection_id",
            ttl_sec: 1,
            roles: ["roles", "roles"],
            send_invitation_email: true,
        };
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/invitations")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.invitations.create({
                invitee: {},
                client_id: "client_id",
                connection_id: "connection_id",
                ttl_sec: 1,
                roles: ["roles", "roles"],
                send_invitation_email: true,
            });
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            invitee: {},
            client_id: "client_id",
            connection_id: "connection_id",
            ttl_sec: 1,
            roles: ["roles", "roles"],
            send_invitation_email: true,
        };
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/invitations")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.invitations.create({
                invitee: {},
                client_id: "client_id",
                connection_id: "connection_id",
                ttl_sec: 1,
                roles: ["roles", "roles"],
                send_invitation_email: true,
            });
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            invitee: {},
            client_id: "client_id",
            connection_id: "connection_id",
            ttl_sec: 1,
            roles: ["roles", "roles"],
            send_invitation_email: true,
        };
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/invitations")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.invitations.create({
                invitee: {},
                client_id: "client_id",
                connection_id: "connection_id",
                ttl_sec: 1,
                roles: ["roles", "roles"],
                send_invitation_email: true,
            });
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("create (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            invitee: {},
            client_id: "client_id",
            connection_id: "connection_id",
            ttl_sec: 1,
            roles: ["roles", "roles"],
            send_invitation_email: true,
        };
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/invitations")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.invitations.create({
                invitee: {},
                client_id: "client_id",
                connection_id: "connection_id",
                ttl_sec: 1,
                roles: ["roles", "roles"],
                send_invitation_email: true,
            });
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "oui_12345678abcdefgh",
            organization_id: "org_12345678abcdefgh",
            inviter: { name: "Allison the Admin" },
            invitee: { email: "user@example.com" },
            client_id: "string",
            connection_id: "con_2CZPv6IY0gWzDaQJ",
            created_at: "2025-04-11T20:11:45Z",
            expires_at: "2025-04-11T20:11:45Z",
            roles: ["string"],
            invitation_url: "<<initiate_login_url>>?invitation=<invite ID>&organization=org_123234",
            ticket_id: "1asdfasd23usjdef",
        };
        server
            .mockEndpoint()
            .get("/invitations/invitation_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organization.invitations.get("invitation_id");
        expect(response).toEqual({
            id: "oui_12345678abcdefgh",
            organization_id: "org_12345678abcdefgh",
            inviter: {
                name: "Allison the Admin",
            },
            invitee: {
                email: "user@example.com",
            },
            client_id: "string",
            connection_id: "con_2CZPv6IY0gWzDaQJ",
            created_at: "2025-04-11T20:11:45Z",
            expires_at: "2025-04-11T20:11:45Z",
            roles: ["string"],
            invitation_url: "<<initiate_login_url>>?invitation=<invite ID>&organization=org_123234",
            ticket_id: "1asdfasd23usjdef",
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/invitations/invitation_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.invitations.get("invitation_id");
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/invitations/invitation_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.invitations.get("invitation_id");
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/invitations/invitation_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.invitations.get("invitation_id");
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/invitations/invitation_id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.invitations.get("invitation_id");
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/invitations/invitation_id").respondWith().statusCode(200).build();

        const response = await client.organization.invitations.delete("invitation_id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/invitations/invitation_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.invitations.delete("invitation_id");
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/invitations/invitation_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.invitations.delete("invitation_id");
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/invitations/invitation_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.invitations.delete("invitation_id");
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("delete (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/invitations/invitation_id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.invitations.delete("invitation_id");
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });
});
