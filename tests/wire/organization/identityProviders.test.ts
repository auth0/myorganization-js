// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { Auth0MyOrgClient } from "../../../src/Client";
import * as Auth0MyOrg from "../../../src/api/index";

describe("IdentityProviders", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            identity_providers: [
                {
                    id: "con_zW1UHutvkVWSWdCC",
                    name: "oidcIdp",
                    strategy: "oidc",
                    domains: ["mydomain.com"],
                    display_name: "OIDC IdP",
                    show_as_button: true,
                    assign_membership_on_login: false,
                    is_enabled: true,
                    access_level: "full",
                    options: {
                        type: "front_channel",
                        client_id: "a8f3b2e7-5d1c-4f9a-8b0d-2e1c3a5b6f7d",
                        discovery_url: "https://{yourDomain}/.well-known/openid-configuration",
                    },
                },
                {
                    id: "con_zW1UHutvkVWSWdCD",
                    name: "samlIdp",
                    strategy: "samlp",
                    domains: ["mydomain.com"],
                    display_name: "Saml IdP",
                    show_as_button: true,
                    assign_membership_on_login: false,
                    is_enabled: true,
                    access_level: "limited",
                    options: {
                        signatureAlgorithm: "rsa-sha256",
                        digestAlgorithm: "sha256",
                        protocolBinding: "HTTP-POST",
                        signSAMLRequest: true,
                        bindingMethod: "HTTP-Redirect",
                        metadataUrl: "a.metadata.url",
                        cert: "MIIDQjCCAiugAwIBAgIRAMp+cW+SgQ2Yh7fF8v8b0OQwDQYJKoZIhvcNAQELBQAw...",
                        idpInitiated: {
                            enabled: true,
                            client_id: "a8f3b2e7-5d1c-4f9a-8b0d-2e1c3a5b6f7d",
                            client_protocol: "SAML",
                            client_authorizequery: "redirect_uri=https://jwt.io&scope=openid email&response_type=token",
                        },
                    },
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/identity-providers")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organization.identityProviders.list();
        expect(response).toEqual({
            identity_providers: [
                {
                    id: "con_zW1UHutvkVWSWdCC",
                    name: "oidcIdp",
                    strategy: "oidc",
                    domains: ["mydomain.com"],
                    display_name: "OIDC IdP",
                    show_as_button: true,
                    assign_membership_on_login: false,
                    is_enabled: true,
                    access_level: "full",
                    options: {
                        type: "front_channel",
                        client_id: "a8f3b2e7-5d1c-4f9a-8b0d-2e1c3a5b6f7d",
                        discovery_url: "https://{yourDomain}/.well-known/openid-configuration",
                    },
                },
                {
                    id: "con_zW1UHutvkVWSWdCD",
                    name: "samlIdp",
                    strategy: "samlp",
                    domains: ["mydomain.com"],
                    display_name: "Saml IdP",
                    show_as_button: true,
                    assign_membership_on_login: false,
                    is_enabled: true,
                    access_level: "limited",
                    options: {
                        signatureAlgorithm: "rsa-sha256",
                        digestAlgorithm: "sha256",
                        protocolBinding: "HTTP-POST",
                        signSAMLRequest: true,
                        bindingMethod: "HTTP-Redirect",
                        metadataUrl: "a.metadata.url",
                        cert: "MIIDQjCCAiugAwIBAgIRAMp+cW+SgQ2Yh7fF8v8b0OQwDQYJKoZIhvcNAQELBQAw...",
                        idpInitiated: {
                            enabled: true,
                            client_id: "a8f3b2e7-5d1c-4f9a-8b0d-2e1c3a5b6f7d",
                            client_protocol: "SAML",
                            client_authorizequery: "redirect_uri=https://jwt.io&scope=openid email&response_type=token",
                        },
                    },
                },
            ],
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/identity-providers")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.list();
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/identity-providers")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.list();
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/identity-providers")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.list();
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/identity-providers")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.list();
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "oidcIdp",
            strategy: "oidc",
            domains: ["mydomain.com"],
            display_name: "OIDC IdP",
            show_as_button: true,
            assign_membership_on_login: false,
            is_enabled: true,
            options: {
                type: "front_channel",
                client_id: "a8f3b2e7-5d1c-4f9a-8b0d-2e1c3a5b6f7d",
                client_secret: "KzQp2sVxR8nTgMjFhYcEWuLoIbDvUoC6A9B1zX7yWqFjHkGrP5sQdLmNp",
                discovery_url: "https://{yourDomain}/.well-known/openid-configuration",
            },
        };
        const rawResponseBody = {
            id: "con_zW1UHutvkVWSWdCC",
            name: "oidcIdp",
            strategy: "oidc",
            domains: ["mydomain.com"],
            display_name: "OIDC IdP",
            show_as_button: true,
            assign_membership_on_login: false,
            is_enabled: true,
            access_level: "full",
            options: {
                type: "front_channel",
                client_id: "client_a8f3b2e7-5d1c-4f9a-8b0d-2e1c3a5b6f7did",
                client_secret: "client_secret",
                discovery_url: "https://{yourDomain}/.well-known/openid-configuration",
            },
        };
        server
            .mockEndpoint()
            .post("/identity-providers")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organization.identityProviders.create({
            name: "oidcIdp",
            strategy: "oidc",
            domains: ["mydomain.com"],
            display_name: "OIDC IdP",
            show_as_button: true,
            assign_membership_on_login: false,
            is_enabled: true,
            options: {
                type: "front_channel",
                client_id: "a8f3b2e7-5d1c-4f9a-8b0d-2e1c3a5b6f7d",
                client_secret: "KzQp2sVxR8nTgMjFhYcEWuLoIbDvUoC6A9B1zX7yWqFjHkGrP5sQdLmNp",
                discovery_url: "https://{yourDomain}/.well-known/openid-configuration",
            },
        });
        expect(response).toEqual({
            id: "con_zW1UHutvkVWSWdCC",
            name: "oidcIdp",
            strategy: "oidc",
            domains: ["mydomain.com"],
            display_name: "OIDC IdP",
            show_as_button: true,
            assign_membership_on_login: false,
            is_enabled: true,
            access_level: "full",
            options: {
                type: "front_channel",
                client_id: "client_a8f3b2e7-5d1c-4f9a-8b0d-2e1c3a5b6f7did",
                client_secret: "client_secret",
                discovery_url: "https://{yourDomain}/.well-known/openid-configuration",
            },
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { strategy: "adfs", options: {}, name: "x" };
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/identity-providers")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.create({
                strategy: "adfs",
                options: {},
                name: "x",
            });
        }).rejects.toThrow(Auth0MyOrg.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { strategy: "adfs", options: {}, name: "x" };
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/identity-providers")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.create({
                strategy: "adfs",
                options: {},
                name: "x",
            });
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { strategy: "adfs", options: {}, name: "x" };
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/identity-providers")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.create({
                strategy: "adfs",
                options: {},
                name: "x",
            });
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { strategy: "adfs", options: {}, name: "x" };
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/identity-providers")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.create({
                strategy: "adfs",
                options: {},
                name: "x",
            });
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("create (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { strategy: "adfs", options: {}, name: "x" };
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/identity-providers")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.create({
                strategy: "adfs",
                options: {},
                name: "x",
            });
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "con_zW1UHutvkVWSWdCC",
            name: "oidcIdp",
            strategy: "oidc",
            domains: ["mydomain.com"],
            display_name: "OIDC IdP",
            show_as_button: true,
            assign_membership_on_login: false,
            is_enabled: true,
            access_level: "readonly",
            options: {
                type: "front_channel",
                client_id: "a8f3b2e7-5d1c-4f9a-8b0d-2e1c3a5b6f7d",
                client_secret: "client_secret",
                discovery_url: "https://{yourDomain}/.well-known/openid-configuration",
            },
        };
        server
            .mockEndpoint()
            .get("/identity-providers/idp_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organization.identityProviders.get("idp_id");
        expect(response).toEqual({
            id: "con_zW1UHutvkVWSWdCC",
            name: "oidcIdp",
            strategy: "oidc",
            domains: ["mydomain.com"],
            display_name: "OIDC IdP",
            show_as_button: true,
            assign_membership_on_login: false,
            is_enabled: true,
            access_level: "readonly",
            options: {
                type: "front_channel",
                client_id: "a8f3b2e7-5d1c-4f9a-8b0d-2e1c3a5b6f7d",
                client_secret: "client_secret",
                discovery_url: "https://{yourDomain}/.well-known/openid-configuration",
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/identity-providers/idp_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.get("idp_id");
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/identity-providers/idp_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.get("idp_id");
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/identity-providers/idp_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.get("idp_id");
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .get("/identity-providers/idp_id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.get("idp_id");
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/identity-providers/idp_id").respondWith().statusCode(200).build();

        const response = await client.organization.identityProviders.delete("idp_id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/identity-providers/idp_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.delete("idp_id");
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/identity-providers/idp_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.delete("idp_id");
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/identity-providers/idp_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.delete("idp_id");
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("delete (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .delete("/identity-providers/idp_id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.delete("idp_id");
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            display_name: "OIDC IdP",
            show_as_button: true,
            assign_membership_on_login: false,
            is_enabled: true,
            options: {
                type: "front_channel",
                client_id: "a8f3b2e7-5d1c-4f9a-8b0d-2e1c3a5b6f7d",
                client_secret: "KzQp2sVxR8nTgMjFhYcEWuLoIbDvUoC6A9B1zX7yWqFjHkGrP5sQdLmNp",
                discovery_url: "https://{yourDomain}/.well-known/openid-configuration",
            },
        };
        const rawResponseBody = {
            id: "con_zW1UHutvkVWSWdCC",
            name: "oidcIdp",
            strategy: "oidc",
            domains: ["mydomain.com"],
            display_name: "OIDC IdP",
            show_as_button: true,
            assign_membership_on_login: false,
            is_enabled: true,
            access_level: "full",
            options: {
                type: "front_channel",
                client_id: "a8f3b2e7-5d1c-4f9a-8b0d-2e1c3a5b6f7d",
                client_secret: "client_secret",
                discovery_url: "https://{yourDomain}/.well-known/openid-configuration",
            },
        };
        server
            .mockEndpoint()
            .patch("/identity-providers/idp_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organization.identityProviders.update("idp_id", {
            display_name: "OIDC IdP",
            show_as_button: true,
            assign_membership_on_login: false,
            is_enabled: true,
            options: {
                type: "front_channel",
                client_id: "a8f3b2e7-5d1c-4f9a-8b0d-2e1c3a5b6f7d",
                client_secret: "KzQp2sVxR8nTgMjFhYcEWuLoIbDvUoC6A9B1zX7yWqFjHkGrP5sQdLmNp",
                discovery_url: "https://{yourDomain}/.well-known/openid-configuration",
            },
        });
        expect(response).toEqual({
            id: "con_zW1UHutvkVWSWdCC",
            name: "oidcIdp",
            strategy: "oidc",
            domains: ["mydomain.com"],
            display_name: "OIDC IdP",
            show_as_button: true,
            assign_membership_on_login: false,
            is_enabled: true,
            access_level: "full",
            options: {
                type: "front_channel",
                client_id: "a8f3b2e7-5d1c-4f9a-8b0d-2e1c3a5b6f7d",
                client_secret: "client_secret",
                discovery_url: "https://{yourDomain}/.well-known/openid-configuration",
            },
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .patch("/identity-providers/idp_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.update("idp_id", {});
        }).rejects.toThrow(Auth0MyOrg.BadRequestError);
    });

    test("update (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .patch("/identity-providers/idp_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.update("idp_id", {});
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("update (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .patch("/identity-providers/idp_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.update("idp_id", {});
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("update (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .patch("/identity-providers/idp_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.update("idp_id", {});
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("update (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .patch("/identity-providers/idp_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.update("idp_id", {});
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });

    test("detach (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {};
        server
            .mockEndpoint()
            .post("/identity-providers/idp_id/detach")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organization.identityProviders.detach("idp_id");
        expect(response).toEqual({});
    });

    test("detach (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/identity-providers/idp_id/detach")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.detach("idp_id");
        }).rejects.toThrow(Auth0MyOrg.BadRequestError);
    });

    test("detach (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/identity-providers/idp_id/detach")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.detach("idp_id");
        }).rejects.toThrow(Auth0MyOrg.UnauthorizedError);
    });

    test("detach (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/identity-providers/idp_id/detach")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.detach("idp_id");
        }).rejects.toThrow(Auth0MyOrg.ForbiddenError);
    });

    test("detach (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/identity-providers/idp_id/detach")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.detach("idp_id");
        }).rejects.toThrow(Auth0MyOrg.NotFoundError);
    });

    test("detach (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new Auth0MyOrgClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "type", status: 1, title: "title", detail: "detail" };
        server
            .mockEndpoint()
            .post("/identity-providers/idp_id/detach")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organization.identityProviders.detach("idp_id");
        }).rejects.toThrow(Auth0MyOrg.TooManyRequestsError);
    });
});
