// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient.js";
import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import * as Auth0MyOrg from "../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as errors from "../../../../../../errors/index.js";
import { Verify } from "../resources/verify/client/Client.js";
import { IdentityProviders } from "../resources/identityProviders/client/Client.js";

export declare namespace Domains {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class Domains {
    protected readonly _options: Domains.Options;
    protected _verify: Verify | undefined;
    protected _identityProviders: IdentityProviders | undefined;

    constructor(_options: Domains.Options) {
        this._options = _options;
    }

    public get verify(): Verify {
        return (this._verify ??= new Verify(this._options));
    }

    public get identityProviders(): IdentityProviders {
        return (this._identityProviders ??= new IdentityProviders(this._options));
    }

    /**
     * Lists all domains pending and verified for an organization.
     *
     * @param {Domains.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Auth0MyOrg.UnauthorizedError}
     * @throws {@link Auth0MyOrg.ForbiddenError}
     * @throws {@link Auth0MyOrg.NotFoundError}
     * @throws {@link Auth0MyOrg.TooManyRequestsError}
     *
     * @example
     *     await client.organization.domains.list()
     */
    public list(
        requestOptions?: Domains.RequestOptions,
    ): core.HttpResponsePromise<Auth0MyOrg.ListOrganizationDomainsResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__list(requestOptions));
    }

    private async __list(
        requestOptions?: Domains.RequestOptions,
    ): Promise<core.WithRawResponse<Auth0MyOrg.ListOrganizationDomainsResponseContent>> {
        const _metadata: core.EndpointMetadata = {
            security: [
                { OAuth2ClientCredentials: ["read:my_org:domains"] },
                { OAuth2AuthCode: ["read:my_org:domains"] },
            ],
        };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.Auth0MyOrgEnvironment.Default,
                "domains",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return {
                data: _response.body as Auth0MyOrg.ListOrganizationDomainsResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Auth0MyOrg.UnauthorizedError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Auth0MyOrg.ForbiddenError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Auth0MyOrg.NotFoundError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 429:
                    throw new Auth0MyOrg.TooManyRequestsError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.Auth0MyOrgError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.Auth0MyOrgError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.Auth0MyOrgTimeoutError("Timeout exceeded when calling GET /domains.");
            case "unknown":
                throw new errors.Auth0MyOrgError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Create a new domain for an organization.
     *
     * @param {Auth0MyOrg.CreateOrganizationDomainRequestContent} request
     * @param {Domains.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Auth0MyOrg.BadRequestError}
     * @throws {@link Auth0MyOrg.UnauthorizedError}
     * @throws {@link Auth0MyOrg.ForbiddenError}
     * @throws {@link Auth0MyOrg.NotFoundError}
     * @throws {@link Auth0MyOrg.ConflictError}
     * @throws {@link Auth0MyOrg.TooManyRequestsError}
     *
     * @example
     *     await client.organization.domains.create({
     *         domain: "acme.com"
     *     })
     */
    public create(
        request: Auth0MyOrg.CreateOrganizationDomainRequestContent,
        requestOptions?: Domains.RequestOptions,
    ): core.HttpResponsePromise<Auth0MyOrg.CreateOrganizationDomainResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Auth0MyOrg.CreateOrganizationDomainRequestContent,
        requestOptions?: Domains.RequestOptions,
    ): Promise<core.WithRawResponse<Auth0MyOrg.CreateOrganizationDomainResponseContent>> {
        const _metadata: core.EndpointMetadata = {
            security: [
                { OAuth2ClientCredentials: ["create:my_org:domains"] },
                { OAuth2AuthCode: ["create:my_org:domains"] },
            ],
        };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.Auth0MyOrgEnvironment.Default,
                "domains",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return {
                data: _response.body as Auth0MyOrg.CreateOrganizationDomainResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Auth0MyOrg.BadRequestError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Auth0MyOrg.UnauthorizedError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Auth0MyOrg.ForbiddenError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Auth0MyOrg.NotFoundError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 409:
                    throw new Auth0MyOrg.ConflictError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 429:
                    throw new Auth0MyOrg.TooManyRequestsError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.Auth0MyOrgError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.Auth0MyOrgError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.Auth0MyOrgTimeoutError("Timeout exceeded when calling POST /domains.");
            case "unknown":
                throw new errors.Auth0MyOrgError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve a domain for an organization.
     *
     * @param {Auth0MyOrg.OrgDomainId} domainId
     * @param {Domains.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Auth0MyOrg.UnauthorizedError}
     * @throws {@link Auth0MyOrg.ForbiddenError}
     * @throws {@link Auth0MyOrg.NotFoundError}
     * @throws {@link Auth0MyOrg.TooManyRequestsError}
     *
     * @example
     *     await client.organization.domains.get("domain_id")
     */
    public get(
        domainId: Auth0MyOrg.OrgDomainId,
        requestOptions?: Domains.RequestOptions,
    ): core.HttpResponsePromise<Auth0MyOrg.GetOrganizationDomainResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__get(domainId, requestOptions));
    }

    private async __get(
        domainId: Auth0MyOrg.OrgDomainId,
        requestOptions?: Domains.RequestOptions,
    ): Promise<core.WithRawResponse<Auth0MyOrg.GetOrganizationDomainResponseContent>> {
        const _metadata: core.EndpointMetadata = {
            security: [
                { OAuth2ClientCredentials: ["read:my_org:domains"] },
                { OAuth2AuthCode: ["read:my_org:domains"] },
            ],
        };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.Auth0MyOrgEnvironment.Default,
                `domains/${encodeURIComponent(domainId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return {
                data: _response.body as Auth0MyOrg.GetOrganizationDomainResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Auth0MyOrg.UnauthorizedError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Auth0MyOrg.ForbiddenError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Auth0MyOrg.NotFoundError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 429:
                    throw new Auth0MyOrg.TooManyRequestsError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.Auth0MyOrgError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.Auth0MyOrgError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.Auth0MyOrgTimeoutError("Timeout exceeded when calling GET /domains/{domain_id}.");
            case "unknown":
                throw new errors.Auth0MyOrgError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Remove a domain from this organization.
     *
     * @param {Auth0MyOrg.OrgDomainId} domainId
     * @param {Domains.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Auth0MyOrg.UnauthorizedError}
     * @throws {@link Auth0MyOrg.ForbiddenError}
     * @throws {@link Auth0MyOrg.NotFoundError}
     * @throws {@link Auth0MyOrg.TooManyRequestsError}
     *
     * @example
     *     await client.organization.domains.delete("domain_id")
     */
    public delete(
        domainId: Auth0MyOrg.OrgDomainId,
        requestOptions?: Domains.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__delete(domainId, requestOptions));
    }

    private async __delete(
        domainId: Auth0MyOrg.OrgDomainId,
        requestOptions?: Domains.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _metadata: core.EndpointMetadata = {
            security: [
                { OAuth2ClientCredentials: ["delete:my_org:domains"] },
                { OAuth2AuthCode: ["delete:my_org:domains"] },
            ],
        };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.Auth0MyOrgEnvironment.Default,
                `domains/${encodeURIComponent(domainId)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Auth0MyOrg.UnauthorizedError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Auth0MyOrg.ForbiddenError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Auth0MyOrg.NotFoundError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 429:
                    throw new Auth0MyOrg.TooManyRequestsError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.Auth0MyOrgError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.Auth0MyOrgError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.Auth0MyOrgTimeoutError("Timeout exceeded when calling DELETE /domains/{domain_id}.");
            case "unknown":
                throw new errors.Auth0MyOrgError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(endpointMetadata: core.EndpointMetadata): Promise<string> {
        return `Bearer ${await core.EndpointSupplier.get(this._options.token, { endpointMetadata })}`;
    }
}
