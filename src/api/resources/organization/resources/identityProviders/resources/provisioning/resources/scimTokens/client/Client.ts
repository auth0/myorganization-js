// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../../../../../BaseClient.js";
import * as environments from "../../../../../../../../../../environments.js";
import * as core from "../../../../../../../../../../core/index.js";
import * as Auth0MyOrg from "../../../../../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../../../../../core/headers.js";
import * as errors from "../../../../../../../../../../errors/index.js";

export declare namespace ScimTokens {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class ScimTokens {
    protected readonly _options: ScimTokens.Options;

    constructor(_options: ScimTokens.Options) {
        this._options = _options;
    }

    /**
     * List the Provisioning SCIM tokens for this identity provider.
     *
     * @param {Auth0MyOrg.IdpId} idpId
     * @param {ScimTokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Auth0MyOrg.UnauthorizedError}
     * @throws {@link Auth0MyOrg.ForbiddenError}
     * @throws {@link Auth0MyOrg.NotFoundError}
     * @throws {@link Auth0MyOrg.TooManyRequestsError}
     *
     * @example
     *     await client.organization.identityProviders.provisioning.scimTokens.list("idp_id")
     */
    public list(
        idpId: Auth0MyOrg.IdpId,
        requestOptions?: ScimTokens.RequestOptions,
    ): core.HttpResponsePromise<Auth0MyOrg.ListIdpProvisioningScimTokensResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__list(idpId, requestOptions));
    }

    private async __list(
        idpId: Auth0MyOrg.IdpId,
        requestOptions?: ScimTokens.RequestOptions,
    ): Promise<core.WithRawResponse<Auth0MyOrg.ListIdpProvisioningScimTokensResponseContent>> {
        const _metadata: core.EndpointMetadata = {
            security: [
                { OAuth2ClientCredentials: ["read:my_org:scim_tokens"] },
                { OAuth2AuthCode: ["read:my_org:scim_tokens"] },
            ],
        };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.Auth0MyOrgEnvironment.Default,
                `identity-providers/${encodeURIComponent(idpId)}/provisioning/scim-tokens`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return {
                data: _response.body as Auth0MyOrg.ListIdpProvisioningScimTokensResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Auth0MyOrg.UnauthorizedError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Auth0MyOrg.ForbiddenError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Auth0MyOrg.NotFoundError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 429:
                    throw new Auth0MyOrg.TooManyRequestsError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.Auth0MyOrgError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.Auth0MyOrgError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.Auth0MyOrgTimeoutError(
                    "Timeout exceeded when calling GET /identity-providers/{idp_id}/provisioning/scim-tokens.",
                );
            case "unknown":
                throw new errors.Auth0MyOrgError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Create a Provisioning SCIM token for this identity provider.
     *
     * @param {Auth0MyOrg.IdpId} idpId
     * @param {Auth0MyOrg.CreateIdpProvisioningScimTokenRequestContent} request
     * @param {ScimTokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Auth0MyOrg.BadRequestError}
     * @throws {@link Auth0MyOrg.UnauthorizedError}
     * @throws {@link Auth0MyOrg.ForbiddenError}
     * @throws {@link Auth0MyOrg.NotFoundError}
     * @throws {@link Auth0MyOrg.TooManyRequestsError}
     *
     * @example
     *     await client.organization.identityProviders.provisioning.scimTokens.create("idp_id", {
     *         token_lifetime: 86400
     *     })
     */
    public create(
        idpId: Auth0MyOrg.IdpId,
        request: Auth0MyOrg.CreateIdpProvisioningScimTokenRequestContent = {},
        requestOptions?: ScimTokens.RequestOptions,
    ): core.HttpResponsePromise<Auth0MyOrg.CreateIdpProvisioningScimTokenResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__create(idpId, request, requestOptions));
    }

    private async __create(
        idpId: Auth0MyOrg.IdpId,
        request: Auth0MyOrg.CreateIdpProvisioningScimTokenRequestContent = {},
        requestOptions?: ScimTokens.RequestOptions,
    ): Promise<core.WithRawResponse<Auth0MyOrg.CreateIdpProvisioningScimTokenResponseContent>> {
        const _metadata: core.EndpointMetadata = {
            security: [
                { OAuth2ClientCredentials: ["create:my_org:scim_tokens"] },
                { OAuth2AuthCode: ["create:my_org:scim_tokens"] },
            ],
        };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.Auth0MyOrgEnvironment.Default,
                `identity-providers/${encodeURIComponent(idpId)}/provisioning/scim-tokens`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return {
                data: _response.body as Auth0MyOrg.CreateIdpProvisioningScimTokenResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Auth0MyOrg.BadRequestError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Auth0MyOrg.UnauthorizedError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Auth0MyOrg.ForbiddenError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Auth0MyOrg.NotFoundError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 429:
                    throw new Auth0MyOrg.TooManyRequestsError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.Auth0MyOrgError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.Auth0MyOrgError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.Auth0MyOrgTimeoutError(
                    "Timeout exceeded when calling POST /identity-providers/{idp_id}/provisioning/scim-tokens.",
                );
            case "unknown":
                throw new errors.Auth0MyOrgError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete a Provisioning SCIM configuration for an identity provider.
     *
     * @param {Auth0MyOrg.IdpId} idpId
     * @param {Auth0MyOrg.IdpProvisioningScimTokenId} idpScimTokenId
     * @param {ScimTokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Auth0MyOrg.UnauthorizedError}
     * @throws {@link Auth0MyOrg.ForbiddenError}
     * @throws {@link Auth0MyOrg.NotFoundError}
     * @throws {@link Auth0MyOrg.TooManyRequestsError}
     *
     * @example
     *     await client.organization.identityProviders.provisioning.scimTokens.delete("idp_id", "idp_scim_token_id")
     */
    public delete(
        idpId: Auth0MyOrg.IdpId,
        idpScimTokenId: Auth0MyOrg.IdpProvisioningScimTokenId,
        requestOptions?: ScimTokens.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__delete(idpId, idpScimTokenId, requestOptions));
    }

    private async __delete(
        idpId: Auth0MyOrg.IdpId,
        idpScimTokenId: Auth0MyOrg.IdpProvisioningScimTokenId,
        requestOptions?: ScimTokens.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _metadata: core.EndpointMetadata = {
            security: [
                { OAuth2ClientCredentials: ["delete:my_org:scim_tokens"] },
                { OAuth2AuthCode: ["delete:my_org:scim_tokens"] },
            ],
        };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.Auth0MyOrgEnvironment.Default,
                `identity-providers/${encodeURIComponent(idpId)}/provisioning/scim-tokens/${encodeURIComponent(idpScimTokenId)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Auth0MyOrg.UnauthorizedError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Auth0MyOrg.ForbiddenError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Auth0MyOrg.NotFoundError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 429:
                    throw new Auth0MyOrg.TooManyRequestsError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.Auth0MyOrgError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.Auth0MyOrgError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.Auth0MyOrgTimeoutError(
                    "Timeout exceeded when calling DELETE /identity-providers/{idp_id}/provisioning/scim-tokens/{idp_scim_token_id}.",
                );
            case "unknown":
                throw new errors.Auth0MyOrgError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(endpointMetadata: core.EndpointMetadata): Promise<string> {
        return `Bearer ${await core.EndpointSupplier.get(this._options.token, { endpointMetadata })}`;
    }
}
