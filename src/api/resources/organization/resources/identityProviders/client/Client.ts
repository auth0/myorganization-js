// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient.js";
import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import * as Auth0MyOrg from "../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as errors from "../../../../../../errors/index.js";
import { Domains } from "../resources/domains/client/Client.js";
import { Provisioning } from "../resources/provisioning/client/Client.js";

export declare namespace IdentityProviders {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class IdentityProviders {
    protected readonly _options: IdentityProviders.Options;
    protected _domains: Domains | undefined;
    protected _provisioning: Provisioning | undefined;

    constructor(_options: IdentityProviders.Options) {
        this._options = _options;
    }

    public get domains(): Domains {
        return (this._domains ??= new Domains(this._options));
    }

    public get provisioning(): Provisioning {
        return (this._provisioning ??= new Provisioning(this._options));
    }

    /**
     * List the identity providers associated with this organization.
     *
     * @param {IdentityProviders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Auth0MyOrg.UnauthorizedError}
     * @throws {@link Auth0MyOrg.ForbiddenError}
     * @throws {@link Auth0MyOrg.NotFoundError}
     * @throws {@link Auth0MyOrg.TooManyRequestsError}
     *
     * @example
     *     await client.organization.identityProviders.list()
     */
    public list(
        requestOptions?: IdentityProviders.RequestOptions,
    ): core.HttpResponsePromise<Auth0MyOrg.ListIdentityProvidersResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__list(requestOptions));
    }

    private async __list(
        requestOptions?: IdentityProviders.RequestOptions,
    ): Promise<core.WithRawResponse<Auth0MyOrg.ListIdentityProvidersResponseContent>> {
        const _metadata: core.EndpointMetadata = {
            security: [
                { OAuth2ClientCredentials: ["read:my_org:identity_providers"] },
                { OAuth2AuthCode: ["read:my_org:identity_providers"] },
            ],
        };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.Auth0MyOrgEnvironment.Default,
                "identity-providers",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return {
                data: _response.body as Auth0MyOrg.ListIdentityProvidersResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Auth0MyOrg.UnauthorizedError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Auth0MyOrg.ForbiddenError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Auth0MyOrg.NotFoundError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 429:
                    throw new Auth0MyOrg.TooManyRequestsError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.Auth0MyOrgError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.Auth0MyOrgError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.Auth0MyOrgTimeoutError("Timeout exceeded when calling GET /identity-providers.");
            case "unknown":
                throw new errors.Auth0MyOrgError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Create an identity provider associated with this organization.
     *
     * @param {Auth0MyOrg.CreateIdentityProviderRequestContent} request
     * @param {IdentityProviders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Auth0MyOrg.BadRequestError}
     * @throws {@link Auth0MyOrg.UnauthorizedError}
     * @throws {@link Auth0MyOrg.ForbiddenError}
     * @throws {@link Auth0MyOrg.NotFoundError}
     * @throws {@link Auth0MyOrg.TooManyRequestsError}
     *
     * @example
     *     await client.organization.identityProviders.create({
     *         name: "oidcIdp",
     *         strategy: "oidc",
     *         domains: ["mydomain.com"],
     *         display_name: "OIDC IdP",
     *         show_as_button: true,
     *         assign_membership_on_login: false,
     *         is_enabled: true,
     *         options: {
     *             type: "front_channel",
     *             client_id: "a8f3b2e7-5d1c-4f9a-8b0d-2e1c3a5b6f7d",
     *             client_secret: "KzQp2sVxR8nTgMjFhYcEWuLoIbDvUoC6A9B1zX7yWqFjHkGrP5sQdLmNp",
     *             discovery_url: "https://{yourDomain}/.well-known/openid-configuration"
     *         }
     *     })
     */
    public create(
        request: Auth0MyOrg.CreateIdentityProviderRequestContent,
        requestOptions?: IdentityProviders.RequestOptions,
    ): core.HttpResponsePromise<Auth0MyOrg.CreateIdentityProviderResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Auth0MyOrg.CreateIdentityProviderRequestContent,
        requestOptions?: IdentityProviders.RequestOptions,
    ): Promise<core.WithRawResponse<Auth0MyOrg.CreateIdentityProviderResponseContent>> {
        const _metadata: core.EndpointMetadata = {
            security: [
                { OAuth2ClientCredentials: ["create:my_org:identity_providers"] },
                { OAuth2AuthCode: ["create:my_org:identity_providers"] },
            ],
        };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.Auth0MyOrgEnvironment.Default,
                "identity-providers",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return {
                data: _response.body as Auth0MyOrg.CreateIdentityProviderResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Auth0MyOrg.BadRequestError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Auth0MyOrg.UnauthorizedError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Auth0MyOrg.ForbiddenError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Auth0MyOrg.NotFoundError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 429:
                    throw new Auth0MyOrg.TooManyRequestsError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.Auth0MyOrgError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.Auth0MyOrgError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.Auth0MyOrgTimeoutError("Timeout exceeded when calling POST /identity-providers.");
            case "unknown":
                throw new errors.Auth0MyOrgError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve the details for one particular identity-provider.
     *
     * @param {Auth0MyOrg.IdpId} idpId
     * @param {IdentityProviders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Auth0MyOrg.UnauthorizedError}
     * @throws {@link Auth0MyOrg.ForbiddenError}
     * @throws {@link Auth0MyOrg.NotFoundError}
     * @throws {@link Auth0MyOrg.TooManyRequestsError}
     *
     * @example
     *     await client.organization.identityProviders.get("idp_id")
     */
    public get(
        idpId: Auth0MyOrg.IdpId,
        requestOptions?: IdentityProviders.RequestOptions,
    ): core.HttpResponsePromise<Auth0MyOrg.GetIdentityProviderResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__get(idpId, requestOptions));
    }

    private async __get(
        idpId: Auth0MyOrg.IdpId,
        requestOptions?: IdentityProviders.RequestOptions,
    ): Promise<core.WithRawResponse<Auth0MyOrg.GetIdentityProviderResponseContent>> {
        const _metadata: core.EndpointMetadata = {
            security: [
                { OAuth2ClientCredentials: ["read:my_org:identity_providers"] },
                { OAuth2AuthCode: ["read:my_org:identity_providers"] },
            ],
        };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.Auth0MyOrgEnvironment.Default,
                `identity-providers/${encodeURIComponent(idpId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return {
                data: _response.body as Auth0MyOrg.GetIdentityProviderResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Auth0MyOrg.UnauthorizedError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Auth0MyOrg.ForbiddenError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Auth0MyOrg.NotFoundError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 429:
                    throw new Auth0MyOrg.TooManyRequestsError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.Auth0MyOrgError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.Auth0MyOrgError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.Auth0MyOrgTimeoutError(
                    "Timeout exceeded when calling GET /identity-providers/{idp_id}.",
                );
            case "unknown":
                throw new errors.Auth0MyOrgError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete an identity provider from this organization.
     *
     * @param {Auth0MyOrg.IdpId} idpId
     * @param {IdentityProviders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Auth0MyOrg.UnauthorizedError}
     * @throws {@link Auth0MyOrg.ForbiddenError}
     * @throws {@link Auth0MyOrg.NotFoundError}
     * @throws {@link Auth0MyOrg.TooManyRequestsError}
     *
     * @example
     *     await client.organization.identityProviders.delete("idp_id")
     */
    public delete(
        idpId: Auth0MyOrg.IdpId,
        requestOptions?: IdentityProviders.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__delete(idpId, requestOptions));
    }

    private async __delete(
        idpId: Auth0MyOrg.IdpId,
        requestOptions?: IdentityProviders.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _metadata: core.EndpointMetadata = {
            security: [
                { OAuth2ClientCredentials: ["delete:my_org:identity_providers"] },
                { OAuth2AuthCode: ["delete:my_org:identity_providers"] },
            ],
        };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.Auth0MyOrgEnvironment.Default,
                `identity-providers/${encodeURIComponent(idpId)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Auth0MyOrg.UnauthorizedError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Auth0MyOrg.ForbiddenError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Auth0MyOrg.NotFoundError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 429:
                    throw new Auth0MyOrg.TooManyRequestsError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.Auth0MyOrgError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.Auth0MyOrgError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.Auth0MyOrgTimeoutError(
                    "Timeout exceeded when calling DELETE /identity-providers/{idp_id}.",
                );
            case "unknown":
                throw new errors.Auth0MyOrgError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update an identity provider associated with this organization.
     *
     * @param {Auth0MyOrg.IdpId} idpId
     * @param {Auth0MyOrg.UpdateIdentityProviderRequestContent} request
     * @param {IdentityProviders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Auth0MyOrg.BadRequestError}
     * @throws {@link Auth0MyOrg.UnauthorizedError}
     * @throws {@link Auth0MyOrg.ForbiddenError}
     * @throws {@link Auth0MyOrg.NotFoundError}
     * @throws {@link Auth0MyOrg.TooManyRequestsError}
     *
     * @example
     *     await client.organization.identityProviders.update("idp_id", {
     *         display_name: "OIDC IdP",
     *         show_as_button: true,
     *         assign_membership_on_login: false,
     *         is_enabled: true,
     *         options: {
     *             type: "front_channel",
     *             client_id: "a8f3b2e7-5d1c-4f9a-8b0d-2e1c3a5b6f7d",
     *             client_secret: "KzQp2sVxR8nTgMjFhYcEWuLoIbDvUoC6A9B1zX7yWqFjHkGrP5sQdLmNp",
     *             discovery_url: "https://{yourDomain}/.well-known/openid-configuration"
     *         }
     *     })
     */
    public update(
        idpId: Auth0MyOrg.IdpId,
        request: Auth0MyOrg.UpdateIdentityProviderRequestContent,
        requestOptions?: IdentityProviders.RequestOptions,
    ): core.HttpResponsePromise<Auth0MyOrg.UpdateIdentityProviderResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__update(idpId, request, requestOptions));
    }

    private async __update(
        idpId: Auth0MyOrg.IdpId,
        request: Auth0MyOrg.UpdateIdentityProviderRequestContent,
        requestOptions?: IdentityProviders.RequestOptions,
    ): Promise<core.WithRawResponse<Auth0MyOrg.UpdateIdentityProviderResponseContent>> {
        const _metadata: core.EndpointMetadata = {
            security: [
                { OAuth2ClientCredentials: ["update:my_org:identity_providers"] },
                { OAuth2AuthCode: ["update:my_org:identity_providers"] },
            ],
        };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.Auth0MyOrgEnvironment.Default,
                `identity-providers/${encodeURIComponent(idpId)}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return {
                data: _response.body as Auth0MyOrg.UpdateIdentityProviderResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Auth0MyOrg.BadRequestError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Auth0MyOrg.UnauthorizedError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Auth0MyOrg.ForbiddenError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Auth0MyOrg.NotFoundError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 429:
                    throw new Auth0MyOrg.TooManyRequestsError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.Auth0MyOrgError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.Auth0MyOrgError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.Auth0MyOrgTimeoutError(
                    "Timeout exceeded when calling PATCH /identity-providers/{idp_id}.",
                );
            case "unknown":
                throw new errors.Auth0MyOrgError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete underlying identity provider from this organization.
     *
     * @param {Auth0MyOrg.IdpId} idpId
     * @param {IdentityProviders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Auth0MyOrg.BadRequestError}
     * @throws {@link Auth0MyOrg.UnauthorizedError}
     * @throws {@link Auth0MyOrg.ForbiddenError}
     * @throws {@link Auth0MyOrg.NotFoundError}
     * @throws {@link Auth0MyOrg.TooManyRequestsError}
     *
     * @example
     *     await client.organization.identityProviders.detach("idp_id")
     */
    public detach(
        idpId: Auth0MyOrg.IdpId,
        requestOptions?: IdentityProviders.RequestOptions,
    ): core.HttpResponsePromise<Auth0MyOrg.DetachIdpProviderResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__detach(idpId, requestOptions));
    }

    private async __detach(
        idpId: Auth0MyOrg.IdpId,
        requestOptions?: IdentityProviders.RequestOptions,
    ): Promise<core.WithRawResponse<Auth0MyOrg.DetachIdpProviderResponseContent>> {
        const _metadata: core.EndpointMetadata = {
            security: [
                { OAuth2ClientCredentials: ["update:my_org:identity_providers_detach"] },
                { OAuth2AuthCode: ["update:my_org:identity_providers_detach"] },
            ],
        };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.Auth0MyOrgEnvironment.Default,
                `identity-providers/${encodeURIComponent(idpId)}/detach`,
            ),
            method: "POST",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return {
                data: _response.body as Auth0MyOrg.DetachIdpProviderResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Auth0MyOrg.BadRequestError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 401:
                    throw new Auth0MyOrg.UnauthorizedError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Auth0MyOrg.ForbiddenError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Auth0MyOrg.NotFoundError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                case 429:
                    throw new Auth0MyOrg.TooManyRequestsError(
                        _response.error.body as Auth0MyOrg.ErrorResponseContent,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.Auth0MyOrgError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.Auth0MyOrgError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.Auth0MyOrgTimeoutError(
                    "Timeout exceeded when calling POST /identity-providers/{idp_id}/detach.",
                );
            case "unknown":
                throw new errors.Auth0MyOrgError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(endpointMetadata: core.EndpointMetadata): Promise<string> {
        return `Bearer ${await core.EndpointSupplier.get(this._options.token, { endpointMetadata })}`;
    }
}
